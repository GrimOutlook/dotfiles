//#include <msp430fg4618.h>


#include <stdint.h>
#include <string.h>
#include <limits.h>
#include <stdlib.h>
#include <math.h>




#include <Constants.h>
#include <Initialize.h>
/*
#include <Display.h>
#include <Snake.h>
#include <Menu.h>
#include <Options.h>
#include <BodySection.h>
#include <Food.h>
*/
#define MAX_SIZE 20
#define MAX_SPEED 63

enum Direction{ NEGATIVE, ZERO, POSITIVE };


typedef struct Food{
    int x, y;
    Food* next_food = NULL;
    Food* prev_food = NULL;
} Food;
typedef struct BodySection{
    int x, y; // Position of body section
    int dx, dy; // dx and dy of when the piece was last moved/spawned; this is for making tail spawing easy
    struct BodySection* prev_body_section; // Goes to head of snake
    struct BodySection* next_body_section;  // Goes to tail of snake
} BodySection;

void firstUpdate( char display[MAX_SIZE][MAX_SIZE]);
int redrawAll( char display[MAX_SIZE][MAX_SIZE]   );
void sendChar(char myChar);
void sendCharArray( char char_array[] );
void receiveChar( char* myChar );
void recieveCharArray( char char_array[], int len );
void charToInt( char ch[] /*chars to convert*/, int len /*len of char array*/, int* newint /*int created from char*/ );
void intToChar( int num /*number to convert*/, char newchar[] /*array to return ints converted into chars in*/, int len /*length of array*/);
void nl();
void np();
void outputPrompt( char prompt[] );

volatile float myData;

// DISPLAY STUFF
char display[MAX_SIZE][MAX_SIZE];

int height = 11;    // Sets default height, given 6 bits ( 63 is the largest possible  )
int width = 11;     // Sets default width, given 6 bits ( 63 is the largest possible  )
int update_speed = 2;   // Sets default update speed, given 6 bits ( 63 is the largest possible  )

char wall_block = '#';  // Sets default wall block
char food_block = '@';  // Sets default food block
char snake_body_block = '*'; // Sets default snake
char empty_space_block = ' '; // Sets default empty space block

int max_food = 1;   // Sets default max number of food blocks
int current_food = 0; // Current number of food spawned

// SNAKE STUFF
int snake_x = (width / 2) + 1;  // Starts snake in horizontal center
int snake_y = (height / 2) + 1; // Starts snake in vertical center
int snake_dx = 1;   // Starts snake moving right
int snake_dy = 0;   // Starts snake not moving vertically
int n_body_sections = 1;
int body_sections[];

int main(void)
{
    Initialize();




        //first_food = NULL;
        //last_food = NULL;

    do
    {
        //main_menu();

        firstUpdate( display );
        do
        {
            redrawAll( display );
            // Start Game
        } while( 1 /*update()*/ );
    } while(1);
}

void firstUpdate( char display[MAX_SIZE][MAX_SIZE])
{
    int i;
    // These first 3 for loops initialize the  walls, which shouldn't change throughout the game

    for( i = 0; i < width; i++)
    {
        display[0][i] = wall_block; // Top row of wall blocks
    }
    for( i = 0; i < height; i++)
    {
        display[i][0] = wall_block; // Left column of wall blocks
        display[i][width-1] = wall_block; // Right column of wall blocks
        display[i][width] = '\0'; // Right column of wall blocks
    }
    for( i = 0; i < width-1; i++ )
    {
        display[height-1][i] = wall_block; // Bottom row of wall bloacks
    }

    int j;
    for( i = 1; i < height - 1; i++ )
    {
        for( j = 1; j < width - 1; j++ )
        {
            display[i][j] = empty_space_block; // Initializes all blocks in the bounds of the walls to space characters
        }
    }

    //newBodySection( snake->x, snake->y, snake->dx, snake->dy, snake );

    //update( display, snake );
}

int redrawAll(char display[MAX_SIZE][MAX_SIZE]   )
{
    // redraws entire screen no matter what has been updated
    //np();
    for( int i = 0; i < height; i++  )
    {
        sendCharArray( display[i] );
        nl();
    }
    return 1;
}

void sendChar(char myChar) {
    while(!(IFG2 & UCA0TXIFG));
    UCA0TXBUF = myChar;
}

void sendCharArray( char char_array[] )
{
    int i = 0;
    while( char_array[i] != '\0' )
    {
        sendChar( char_array[i] );
        i++;
    }
}

void receiveChar( char* myChar )
{
    while(!(IFG2&UCA0RXIFG));
    *myChar = UCA0RXBUF;
}

void recieveCharArray( char char_array[], int len )
{
    int i;
    for( i = 0; i < len; i++ )
    {
        receiveChar( &char_array[i] );
    }
}

void charToInt( char ch[] /*chars to convert*/, int len /*len of char array*/, int* newint /*int created from char*/ )
{
    int i;
    *newint = 0;
    for( i = len; i > 0; i-- )
    {
        *newint += (int)(ch[i] - 48)*pow(10,i); // Subtracts 50 to get true int val, casts it to integer, and multiplies it by its power
    }
}

void intToChar( int num /*number to convert*/, char newchar[] /*array to return ints converted into chars in*/, int len /*length of array*/)
{
    /*
    int i;
    for( i = 0; i < len; i++ )
    {
        newchar[i] = (num/pow(10,i)%10)+48;
    }
    */
}

void nl( void )
{
    static char rn[] = "\r\n\0"; // Makes newline
    sendCharArray( rn );
}

void np( void )
{
    static char f[] = "\f\0"; // Scrolls down to empty page
    sendCharArray( f );
}

void outputPrompt( char prompt[] )
{
    // Outputs prompts such as main menu and options
    sendCharArray( prompt );
}
