#include <iostream>
#include <iomanip>
#include <fstream>
#include <climits>
#include <string>

using namespace std;

#define MAX_SIZE 500

void DP_OptimalBinarySearchTree( int bst[], int S[MAX_SIZE][MAX_SIZE], int R[MAX_SIZE][MAX_SIZE], int len  );
void Output( int S[MAX_SIZE][MAX_SIZE], int R[MAX_SIZE][MAX_SIZE], int bst[], int len);
void Output_Table( ofstream* oFile, int S[MAX_SIZE][MAX_SIZE], int R[MAX_SIZE][MAX_SIZE], int len );
void Output_BinaryTree( ofstream* oFile, int bst[], int R[MAX_SIZE][MAX_SIZE] , int i, int j, int space_needed );

int main(void)
{
    ifstream iFile("input.txt");
    
    // First number in file is number of elements
    // The next numbers are the probabilities needed.
    int len;
    iFile >> len;
    
    int bst[len];
    for( int i = 0; i < len; i++ )
    {
        iFile >> bst[i];
    }

    int S[MAX_SIZE][MAX_SIZE];    // Values
    int R[MAX_SIZE][MAX_SIZE];    // Roots

    DP_OptimalBinarySearchTree( bst, S, R, len );

    Output( S, R, bst, len );
}

void DP_OptimalBinarySearchTree( int bst[], int S[MAX_SIZE][MAX_SIZE], int R[MAX_SIZE][MAX_SIZE], int len  )
{
    for( int i = 0; i <= len; i++  )
    {
        for( int j = i; j <= len+1; j++  )
        {
            S[i][j] = INT_MAX;
        }
    }
    for( int i = 1; i <= len+1; i++ )
    {
        S[i][i-1] = 0;
    }
    for( int i = 1; i <= len; i++ )
    {   
        S[i][i] = bst[i-1];
        R[i][i] = i;
    }
    int i,j,r,t;
    for (j = 1; j <= len-1; j++)
    {
        for (i=1; i <= len-j; i++)
        {
            for (r = i; r <= i+j; r++)
            {
                t = S[i][r-1] + S[r+1][i+j];
                if (t < S[i][i+j])
                {
                    S[i][i+j] = t;
                    R[i][i+j] = r;
                }
            }
            for (int k = i; k <= i+j; S[i][i+j] += bst[k++ -1]);
        }
    }
}
void Output( int S[MAX_SIZE][MAX_SIZE], int R[MAX_SIZE][MAX_SIZE], int bst[], int len  )
{
    ofstream oFile("djg0020_1.txt");
    Output_Table( &oFile, S, R, len );
    oFile << endl << "Tree Output" << endl;
    Output_BinaryTree( &oFile, bst, R, 1, len, 0 );
    oFile.close();
}

void Output_Table( ofstream* oFile, int S[MAX_SIZE][MAX_SIZE], int R[MAX_SIZE][MAX_SIZE], int len )
{
    *oFile << "Roots Table:" << endl << " -";
    for(int i = 0; i <= len; i++)
    {
        *oFile << setw(5) << i;
    }
    *oFile << endl;
    for( int i = 1; i <= len+1; i++  )
    {
        *oFile << setw(2) << (i);
        for( int j = 0; j <= len; j++  )
        {
            *oFile << setw(5) << R[i][j];
        }
        *oFile << endl;
    }

    *oFile << endl << "Values Table:" << endl << " -";
    for(int i = 0; i <= len; i++)
    {
        *oFile << setw(7) << i;
    }
    *oFile << endl;
    for( int i = 1; i <= len+1; i++  )
    {
        *oFile << setw(2) << (i);
        for( int j = 0; j <= len; j++  )
        {
            *oFile << setw(7) << S[i][j];
        }
        *oFile << endl;
    }
}

void Output_BinaryTree( ofstream* oFile, int bst[], int R[MAX_SIZE][MAX_SIZE], int i, int j, int space_needed )
{
  if (j < i) 
  {
    if(space_needed > 0)
        *oFile << string(space_needed, ' ') << "-" << endl;
    return;
  }

  *oFile << string(space_needed ,' ') << R[i][j] << endl;	// print root
  Output_BinaryTree(oFile, bst, R, i, R[i][j]-1, space_needed+2);	// print left subtree
  Output_BinaryTree(oFile, bst, R, R[i][j]+1,j, space_needed+2);	// print right subtree
}
