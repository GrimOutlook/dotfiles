#ifndef SNAKE_H
#define SNAKE_H

#include <Constants.h>
#include <BodySection.h>

typedef struct Snake
{

    int x:6 = 6; // Head x position, 6 bits ( max value of 63 )
    int y:6 = 6; // Head y position, 6 bits ( max value of 63 )

    int dx:2 = POSITIVE; // Head direction of x
    int dy:2 = ZERO; // Head direction of y

    int n_body_sections = 1; // Number of body sections
    BodySection* first_body_section = NULL; // The snakes head piece
    BodySection* last_body_section = NULL; // The snakes tail piece
};

void moveSnake()
{
    BodySection* current_front = snake->first_body_section;
    BodySection* current_end = snake->last_body_section;

    current_end->x = snake->x + snake->dx;
    current_end->y = snake->y + snake->dy;
    curremt_end->dx = snake->dx; // This is for tail piece spawning reasons
    current_end->dy = snake->dy; //

    current_end->prev_body_section->next_body_section = NULL; // Makes node before end point to null
    snake->first_body_section = current_end; // Makes the end piece the front piece
    snake->last_body_section = snake->last_body_section->prev_body_section; // Makes the new last body section the previously second to last one
    snake->last_body_section->next_body_section = NULL; // Makes the new last section's next body section ptr point to NULL
    current_end->prev_body_section = NULL;  // Sets the new first body section's previous body section ptr to null
    current_end->next_body_section = current_front; // Sets the new first body section's next body section ptr to the new second body section
}

int isEatingFood()
{
    Food* current_food = food_ll;
    while( current_food != NULL )
    {
        if(  snake->x + snake->dx - 1 == current_food->x && snake->y + snake->dy - 1 ==  current_food->y )
        {
            return 1;
        }
    }
    return 0;
}

int isCollidingWithBody( int x, int y )
{
    // Call this before moving
    // When chcking snake input snake->x + snake->dx - 1 for x
    //
    // This checks for collisions against your own body
    BodySection body_section_ptr* = snake.body_section_ll;
    while( body_section_ptr != NULL )
    {
        if( x == body_section_ptr->x && y == body_section_ptr->y  )
        {
            return 1;
        }
        body_section_ptr = body_section_ptr->next_body_section;
    }
    return 0;

}

int isCollidingWithWall( int x, int y )
{
    // Call this before moving
    // When chcking snake input snake->x + snake->dx - 1 for x
    //
    // This checks for wall collision
    return( x <= 0 ||  x >= MAX_SIZE ||
            y <= 0 ||  y >= MAX_SIZE );
}

int snakeIsColliding()
{
    int next_x = snake->x + snake->dx - 1;
    int next_y = snake->y + snake->dy - 1;
    return( isCollidingWithBody( next_x, next_y ) || isCollidingWithWall( next_x, next_y );
}

#endif
