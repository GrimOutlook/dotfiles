#!/usr/bin/env bash

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return ;;
esac

# Verify that:
# 1. TMUX command exists
# 2. PS1 string is set and isn't ""
# 3. We aren't in a screen session
# 4. We aren't in a TMUX session already
# 5. Additional check to make sure we aren't in a tmux session
if command -v tmux &> /dev/null && \
    [ -n "$PS1" ] && \
    [[ ! "$TERM" =~ screen ]] && \
    [[ ! "$TERM" =~ tmux ]] && \
    [ -z "$TMUX" ]; then 
    tmux new-session
fi

# Add the ble.sh functionality. Needs to be towards the top.
source "$HOME/.local/share/blesh/ble.sh" \
    --noattach \
    --rcfile "$HOME/.config/ble/blerc"

# ---------------------------------------------------------------------------- #
# -- Bash Options ------------------------------------------------------------ #
# ---------------------------------------------------------------------------- #
# If set, a command name that is the name of a directory is executed as if it
# were the argument to the cd command.
shopt -s autocd

# If set, minor errors in the spelling of a directory component in a cd command
# will be corrected. The errors checked for are transposed characters, a missing
# character, and a character too many. If a correction is found, the corrected
# path is printed, and the command proceeds. This option is only used by
# interactive shells.
shopt -s cdspell

# If set, Bash lists the status of any stopped and running jobs before exiting
# an interactive shell. If any jobs are running, this causes the exit to be
# deferred until a second exit is attempted without an intervening command (see
# Job Control). The shell always postpones exiting if any jobs are stopped. 
shopt -s checkjobs

# If set, Bash attempts spelling correction on directory names during word
# completion if the directory name initially supplied does not exist.
shopt -s dirspell

# If set, the history list is appended to the file named by the value of the
# HISTFILE variable when the shell exits, rather than overwriting the file.
shopt -s histappend

# If set, and Readline is being used, a user is given the opportunity to re-edit
# a failed history substitution. 
shopt -s histreedit

# If set, and Readline is being used, the results of history substitution are
# not immediately passed to the shell parser. Instead, the resulting line is
# loaded into the Readline editing buffer, allowing further modification.
shopt -s histverify

# ---------------------------------------------------------------------------- #
# -- Environment Variables --------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Make nvim the default editor
export EDITOR=/usr/bin/nvim

# Export commonly used paths
export DOTFILES=$HOME/.dotfiles
export CONFIG=$HOME/.config

# Update the PATH variable to enable using the custom scripts in this repo.
export PATH+=":$DOTFILES/bash/scripts/:$DOTFILES/git/scripts/"

# Prevent go from creating a `go/` directory in the middle of your home
# directory.
export GOPATH=$HOME/.go

# -- History ----------------------------------------------------------------- #
# Ignore duplicates in bash history
export HISTCONTROL=ignoreboth
# Increase bash history size
export HISTSIZE=10000
export HISTFILESIZE=10000

# After each command, save and reload history. This should only be enables if
# ble.sh is not in use.
# export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# -- Java -------------------------------------------------------------------- #
# Set the Java home. Change this to a specific version if needed.
export JAVA_HOME=/usr/lib/jvm/default/

# -- Zoxide ------------------------------------------------------------------ #
# Echo the path that zoxide has moved you into.
export _ZO_ECHO=1

# -- Bat --------------------------------------------------------------------- #
# Color manpage output with bat
if command -v bat &>/dev/null; then
    export MANPAGER="sh -c \
        'sed -u -e \"s/\\x1B\[[0-9;]*m//g; s/.\\x08//g\" | bat -p -lman'"
else
    echo "bat is not installed" >&2
fi

# ---------------------------------------------------------------------------- #
# -- Source Additional Files ------------------------------------------------- #
# ---------------------------------------------------------------------------- #

# Import aliases defined by us
ALIASES=$HOME/.bash_aliases
if [[ -f $ALIASES ]]; then
    source "$ALIASES"
fi

# Import cargo commands
source "$HOME/.cargo/env" &>/dev/null

# Add hook for finding matching command if it doesn't exist
source "/usr/share/doc/pkgfile/command-not-found.bash"

# -- Run Startup Scripts -------------------------------------------------------

function eval-if-available() {
    full_command="$1"

    command="$(echo "$full_command" | cut -d ' ' -f 1)"
    if command -v "$command" &>/dev/null; then
        eval 'eval "$($full_command)"'
    else
        echo "$command is not installed" >&2
    fi
}

# Set up fzf key bindings and fuzzy completion
eval-if-available "fzf --bash"

# Launch the startship prompt
eval-if-available "starship init bash"

# Easy reruns after typo
eval-if-available "thefuck --alias"

# Jump to directories smartly
eval-if-available "zoxide init bash --cmd cd"

# Please put the following line in the end of .bashrc
[[ ! ${BLE_VERSION-} ]] || ble-attach
